#!/usr/bin/perl
# Модуль для изменения размеров изображения
use Image::Magick;
use Data::Dumper;
my $input_file=$ARGV[0];
if($input_file=~m/^(.+)\.(.*?)$/){
	our $input=$1;
	our $input_ext=$2;
}
#print "input: $input<br>"; exit;
our @output=();
$output_object={};

foreach my $p (@ARGV){
	if($p=~m/^--(.+?)(=(.+))?$/){
		my ($opt,$val)=($1,$3);
		$val=~s/^'|'$//g;

		if($opt eq 'output_file'){
			$val=~s/\[%input%\]/$input/;
			$val=~s/\[%input_ext%\]/$input_ext/;
			if($val=~m/^[0-9a-zA-Z\._\-\/]+$/){
				$output_object->{file}=$val;
			}
		}

		if($opt eq 'size'){
#			print "val: $val<br/>";
			if($val=~m/^(\d+)x(\d+)$/){
#				print "1: $1 ; 2: $2<br/>";
				$output_object->{width}=$1;
				$output_object->{height}=$2;
			}

			&check_output_object;

		}

		&help if($opt eq 'help');
	}
}
if($input_file!~m/[0-9a-zA-Z\._\-\/]+/){
	print "Не указано или указано не верно имя входного файла ($input_file)\n";
	exit;
}




#print Dumper(@output);
foreach my $o (@output){
	#print Dumper($o);
	#print "\n\noutput_file: $o->{file}\n";
	#print "\n\width: $o->{width}\n";
	#print "\n\height: $o->{height}\n";
	leva_resize($input_file, $o->{file}, $o->{width}, $o->{height});
}

sub check_output_object{ # проверка объекта, отвечающего за выходной файл
	#print "filel $output_object->{file}\n";
	if($output_object->{file}!~m/[0-9a-zA-Z\._\-\/]+/){
		print "Не указано имя файла-приёмника ($output_object->{file})\n";
		exit;
	}
	if(!length($output_object->{width}) || !length($output_object->{height})){
		print "не указаны или указаны не верно размеры выходного файла; '$output_object->{width}' ; '$output_object->{height}'";
		exit;
	}
	push @output, {file=>$output_object->{file},width=>$output_object->{width}, height=>$output_object->{height}};


}

sub help{
	print q{

МОДУЛЬ picture_resize
Предназначен для изменения размера загружаемых картинок.
опции:
./resize [файл-источник] ( --output_file='[файл-приёмник]' --size='[ширина]x[высота]' )
часть указанная в скобках, может повторяться несколько раз (таким образом данный модуль сделает несколько копий изображений).

--output_file
  файл-приёмник -- изменённый файл. Возможна ситуация, когда имя файла-приёмника совпадаем с именем файла-источника.
  В этом случае изменения записываются в источник. Также возможна ситуация, когда указывается несколько приёмников
  (для каждого из приёмников необходимо задать ширину и высоту). В таком случае, на выходе получится несколько копий картинок с
  изменёнными размерами.
  При указании выходного имени файла, возможно указывать переменную [%input%] -- это имя входного файла без расширения.
  [%input_ext%] -- расирение входного файла.

  В этом случае возможны такие записи:
  ./resize picture.jpg --output_file='[%input%]_mini.[%input_ext%]' --size='100x100'

--size
  ширина и высота файла-приёмника
};
}

sub leva_resize {
    my ($input_file, $output_file, $border_width, $border_height) = @_;
    my $image;
    $image = Image::Magick->new;
    my $x = $image->Read($input_file);
    my ($picture_width, $picture_height) = $image->Get('base-columns', 'base-rows');
    print "($picture_width, $picture_height)\n";
    if (($picture_width < $border_width) && ($picture_height < $border_height)) {
        $image->Resize(width=>$picture_width, height=>$picture_height);
    } elsif ($border_width != 0 && $border_height != 0) {
        my $k;
        my $ko_width = $border_width / $picture_width; # Высчитываем коэффициент пропорциональности соотношения высоты рамки и картинки
        my $ko_height = $border_height / $picture_height; # Высчитываем коэффициент пропорциональности соотношения ширины рамки и картинки
        my $ko = $ko_width / $ko_height; # Вычисляем соотношение обоих коэффициенктов
        if ($ko >= 1) { # если уменьшение дает поля сверху-снизу
            $k = $border_height / $picture_height;
        } elsif ($ko < 1) { # если уменьшение дает поля по слева-справа
            $k = $border_width / $picture_width;
        } elsif (($border_height >= $picture_height) && ($border_width >= $picture_width)) { # если картинка меньше рамки - ничего делать с ней не будем
            $k = undef;
        }
        if (defined $k) {
            my $result_height = int($picture_height * $k);
            my $result_width = int($picture_width * $k);
            $image->Resize(width=>$result_width, height=>$result_height);
        } else {
            $image->Resize(width=>$picture_width, height=>$picture_height);
        }
    } elsif ($border_height == 0) {
		if ($picture_width < $border_width) {
			$image->Resize(width=>$picture_width, height=>$picture_height);
		}
		else {
			my $k = $border_width / $picture_width;
			my $result_height = int($picture_height * $k);
			my $result_width = int($picture_width * $k);
			$image->Resize(width=>$result_width, height=>$result_height);
		}
    } elsif ($border_width == 0) {
		if ($picture_height < $border_height) {
			$image->Resize(width=>$picture_width, height=>$picture_height);
		}
		else {
			my $k = $border_height / $picture_height;
			my $result_height = int($picture_height * $k);
			my $result_width = int($picture_width * $k);
			$image->Resize(width=>$result_width, height=>$result_height);
		}
    }
    print "пишу: $output_file\n";
    $x = $image->Write($output_file);
	1;
}


sub resize{ # процедура ресайзинга
	my ($input_file, $output_file, $width, $height)=@_;
	my $image;
	$image = Image::Magick->new; #новый проект
	my $x = $image->Read($input_file); #открываем файл
	my ($ox,$oy)=$image->Get('base-columns','base-rows');
	#my $nx=int(($ox/$oy)*$height); #вычисляем ширину
	my $ny=int(($oy/$ox)*$width); #вычисляем высоту
	$image->Resize(width=>$width, height=>$ny);
	if($ny>$height){
		$nny=int(($ny-$height)/2); #Вычисляем откуда нам резать

		$image->Crop(x=>0, y=>$nny);
		$image->Crop($width.'x'.$height); #С того места вырезаем 200х150
	}
	$x = $image->Write($output_file);
}

=cut
sub resize{ # процедура ресайзинга
	my ($input_file, $output_file, $width, $height)=@_;
	my $image;
	$image = Image::Magick->new; #новый проект
	my $x = $image->Read($input_file); #открываем файл
	my ($ox,$oy)=$image->Get('base-columns','base-rows');
	my $nx=int(($ox/$oy)*$height); #вычисляем ширину
	$image->Resize(width=>$nx, height=>$height);
	if($nx>$width){
		$nnx=int(($nx-$width)/2); #Вычисляем откуда нам резать
		print "nnx: $nnx\n";
		$image->Crop(x=>$nnx, y=>0);
		$image->Crop($width.'x'.$height); #С того места вырезаем 200х150
	}
	$x = $image->Write($output_file);
}
=cut
